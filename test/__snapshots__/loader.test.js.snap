// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`loader should not work with source maps when the "devtool" options are disabled: errors 1`] = `Array []`;

exports[`loader should not work with source maps when the "devtool" options are disabled: module 1`] = `
"var Foo = Foo || {};
var Bar = Bar || {};
var Baz = {
  nestedNumber: '12',
  nestedFunction: function test() {}
};

var simple = function simple() {};

var simple_foo = [1, 2, 3, 4, 5];

Foo.Image = function (width, height, data) {
  this.width = width || 0;
  this.height = height || 0;
  this.data = data || [];
};

Bar.test = [1, 2, 3, 4];

class MyClass {
  myFunction() {
    return 12;
  }

}

const myVariable = new MyClass();

/*** EXPORTS FROM exports-loader ***/
export {
  Foo
};
"
`;

exports[`loader should not work with source maps when the "devtool" options are disabled: result 1`] = `
Object {
  "Foo": Object {
    "Image": [Function],
  },
}
`;

exports[`loader should not work with source maps when the "devtool" options are disabled: warnings 1`] = `Array []`;

exports[`loader should work with inline syntax: errors 1`] = `Array []`;

exports[`loader should work with inline syntax: module 1`] = `
"module.exports = require('../../src/cjs.js?exports=CV!./exports/cv.js');
"
`;

exports[`loader should work with inline syntax: result 1`] = `
Object {
  "CV": Object {
    "Image": [Function],
    "stackBoxBlurMult": Array [
      1,
      171,
      205,
      293,
      57,
      373,
      79,
      137,
      241,
      27,
      391,
      357,
      41,
      19,
      283,
      265,
    ],
  },
}
`;

exports[`loader should work with inline syntax: warnings 1`] = `Array []`;

exports[`loader should work with multiple object values: errors 1`] = `Array []`;

exports[`loader should work with multiple object values: module 1`] = `
"var Foo = Foo || {};
var Bar = Bar || {};
var Baz = {
  nestedNumber: '12',
  nestedFunction: function test() {}
};
var simple = function simple() {};
var simple_foo = [1, 2, 3, 4, 5];

Foo.Image = function(width, height, data){
  this.width = width || 0;
  this.height = height || 0;
  this.data = data || [];
};

Bar.test = [1, 2, 3, 4];

class MyClass {
  myFunction() {
    return 12;
  }
}

const myVariable = new MyClass();


/*** EXPORTS FROM exports-loader ***/
export {
  Foo
};
export {
  Bar
};
"
`;

exports[`loader should work with multiple object values: result 1`] = `
Object {
  "Bar": Object {
    "test": Array [
      1,
      2,
      3,
      4,
    ],
  },
  "Foo": Object {
    "Image": [Function],
  },
}
`;

exports[`loader should work with multiple object values: warnings 1`] = `Array []`;

exports[`loader should work with multiple string values: errors 1`] = `Array []`;

exports[`loader should work with multiple string values: module 1`] = `
"var Foo = Foo || {};
var Bar = Bar || {};
var Baz = {
  nestedNumber: '12',
  nestedFunction: function test() {}
};
var simple = function simple() {};
var simple_foo = [1, 2, 3, 4, 5];

Foo.Image = function(width, height, data){
  this.width = width || 0;
  this.height = height || 0;
  this.data = data || [];
};

Bar.test = [1, 2, 3, 4];

class MyClass {
  myFunction() {
    return 12;
  }
}

const myVariable = new MyClass();


/*** EXPORTS FROM exports-loader ***/
export {
  Foo
};
export {
  Bar
};
"
`;

exports[`loader should work with multiple string values: result 1`] = `
Object {
  "Bar": Object {
    "test": Array [
      1,
      2,
      3,
      4,
    ],
  },
  "Foo": Object {
    "Image": [Function],
  },
}
`;

exports[`loader should work with multiple string values: warnings 1`] = `Array []`;

exports[`loader should work with object value when the "list" option is array of string: errors 1`] = `Array []`;

exports[`loader should work with object value when the "list" option is array of string: module 1`] = `
"var Foo = Foo || {};
var Bar = Bar || {};
var Baz = {
  nestedNumber: '12',
  nestedFunction: function test() {}
};
var simple = function simple() {};
var simple_foo = [1, 2, 3, 4, 5];

Foo.Image = function(width, height, data){
  this.width = width || 0;
  this.height = height || 0;
  this.data = data || [];
};

Bar.test = [1, 2, 3, 4];

class MyClass {
  myFunction() {
    return 12;
  }
}

const myVariable = new MyClass();


/*** EXPORTS FROM exports-loader ***/
export {
  Foo,
  Bar
};
"
`;

exports[`loader should work with object value when the "list" option is array of string: result 1`] = `
Object {
  "Bar": Object {
    "test": Array [
      1,
      2,
      3,
      4,
    ],
  },
  "Foo": Object {
    "Image": [Function],
  },
}
`;

exports[`loader should work with object value when the "list" option is array of string: warnings 1`] = `Array []`;

exports[`loader should work with object value when the "list" option is array of strings and objects: errors 1`] = `Array []`;

exports[`loader should work with object value when the "list" option is array of strings and objects: module 1`] = `
"var Foo = Foo || {};
var Bar = Bar || {};
var Baz = {
  nestedNumber: '12',
  nestedFunction: function test() {}
};
var simple = function simple() {};
var simple_foo = [1, 2, 3, 4, 5];

Foo.Image = function(width, height, data){
  this.width = width || 0;
  this.height = height || 0;
  this.data = data || [];
};

Bar.test = [1, 2, 3, 4];

class MyClass {
  myFunction() {
    return 12;
  }
}

const myVariable = new MyClass();


/*** EXPORTS FROM exports-loader ***/
export {
  Foo,
  Bar
};
"
`;

exports[`loader should work with object value when the "list" option is array of strings and objects: result 1`] = `
Object {
  "Bar": Object {
    "test": Array [
      1,
      2,
      3,
      4,
    ],
  },
  "Foo": Object {
    "Image": [Function],
  },
}
`;

exports[`loader should work with object value when the "list" option is array of strings and objects: warnings 1`] = `Array []`;

exports[`loader should work with object value when the "list" option is object: errors 1`] = `Array []`;

exports[`loader should work with object value when the "list" option is object: module 1`] = `
"var Foo = Foo || {};
var Bar = Bar || {};
var Baz = {
  nestedNumber: '12',
  nestedFunction: function test() {}
};
var simple = function simple() {};
var simple_foo = [1, 2, 3, 4, 5];

Foo.Image = function(width, height, data){
  this.width = width || 0;
  this.height = height || 0;
  this.data = data || [];
};

Bar.test = [1, 2, 3, 4];

class MyClass {
  myFunction() {
    return 12;
  }
}

const myVariable = new MyClass();


/*** EXPORTS FROM exports-loader ***/
export {
  Foo
};
"
`;

exports[`loader should work with object value when the "list" option is object: result 1`] = `
Object {
  "Foo": Object {
    "Image": [Function],
  },
}
`;

exports[`loader should work with object value when the "list" option is object: warnings 1`] = `Array []`;

exports[`loader should work with object value when the "list" option is string: errors 1`] = `Array []`;

exports[`loader should work with object value when the "list" option is string: module 1`] = `
"var Foo = Foo || {};
var Bar = Bar || {};
var Baz = {
  nestedNumber: '12',
  nestedFunction: function test() {}
};
var simple = function simple() {};
var simple_foo = [1, 2, 3, 4, 5];

Foo.Image = function(width, height, data){
  this.width = width || 0;
  this.height = height || 0;
  this.data = data || [];
};

Bar.test = [1, 2, 3, 4];

class MyClass {
  myFunction() {
    return 12;
  }
}

const myVariable = new MyClass();


/*** EXPORTS FROM exports-loader ***/
export {
  Foo
};
"
`;

exports[`loader should work with object value when the "list" option is string: result 1`] = `
Object {
  "Foo": Object {
    "Image": [Function],
  },
}
`;

exports[`loader should work with object value when the "list" option is string: warnings 1`] = `Array []`;

exports[`loader should work with object value with multiple list values: errors 1`] = `Array []`;

exports[`loader should work with object value with multiple list values: module 1`] = `
"var Foo = Foo || {};
var Bar = Bar || {};
var Baz = {
  nestedNumber: '12',
  nestedFunction: function test() {}
};
var simple = function simple() {};
var simple_foo = [1, 2, 3, 4, 5];

Foo.Image = function(width, height, data){
  this.width = width || 0;
  this.height = height || 0;
  this.data = data || [];
};

Bar.test = [1, 2, 3, 4];

class MyClass {
  myFunction() {
    return 12;
  }
}

const myVariable = new MyClass();


/*** EXPORTS FROM exports-loader ***/
export {
  Foo,
  Bar
};
"
`;

exports[`loader should work with object value with multiple list values: result 1`] = `
Object {
  "Bar": Object {
    "test": Array [
      1,
      2,
      3,
      4,
    ],
  },
  "Foo": Object {
    "Image": [Function],
  },
}
`;

exports[`loader should work with object value with multiple list values: warnings 1`] = `Array []`;

exports[`loader should work with object value: errors 1`] = `Array []`;

exports[`loader should work with object value: module 1`] = `
"var Foo = Foo || {};
var Bar = Bar || {};
var Baz = {
  nestedNumber: '12',
  nestedFunction: function test() {}
};
var simple = function simple() {};
var simple_foo = [1, 2, 3, 4, 5];

Foo.Image = function(width, height, data){
  this.width = width || 0;
  this.height = height || 0;
  this.data = data || [];
};

Bar.test = [1, 2, 3, 4];

class MyClass {
  myFunction() {
    return 12;
  }
}

const myVariable = new MyClass();


/*** EXPORTS FROM exports-loader ***/
export {
  Foo
};
"
`;

exports[`loader should work with object value: result 1`] = `
Object {
  "Foo": Object {
    "Image": [Function],
  },
}
`;

exports[`loader should work with object value: warnings 1`] = `Array []`;

exports[`loader should work with source maps when the "devtool" option is enabled: errors 1`] = `Array []`;

exports[`loader should work with source maps when the "devtool" option is enabled: module 1`] = `
"var Foo = Foo || {};
var Bar = Bar || {};
var Baz = {
  nestedNumber: '12',
  nestedFunction: function test() {}
};

var simple = function simple() {};

var simple_foo = [1, 2, 3, 4, 5];

Foo.Image = function (width, height, data) {
  this.width = width || 0;
  this.height = height || 0;
  this.data = data || [];
};

Bar.test = [1, 2, 3, 4];

class MyClass {
  myFunction() {
    return 12;
  }

}

const myVariable = new MyClass();

/*** EXPORTS FROM exports-loader ***/
export {
  Foo
};
"
`;

exports[`loader should work with source maps when the "devtool" option is enabled: result 1`] = `Object {}`;

exports[`loader should work with source maps when the "devtool" option is enabled: warnings 1`] = `Array []`;

exports[`loader should work with string value: errors 1`] = `Array []`;

exports[`loader should work with string value: module 1`] = `
"var Foo = Foo || {};
var Bar = Bar || {};
var Baz = {
  nestedNumber: '12',
  nestedFunction: function test() {}
};
var simple = function simple() {};
var simple_foo = [1, 2, 3, 4, 5];

Foo.Image = function(width, height, data){
  this.width = width || 0;
  this.height = height || 0;
  this.data = data || [];
};

Bar.test = [1, 2, 3, 4];

class MyClass {
  myFunction() {
    return 12;
  }
}

const myVariable = new MyClass();


/*** EXPORTS FROM exports-loader ***/
export {
  Foo
};
"
`;

exports[`loader should work with string value: result 1`] = `
Object {
  "Foo": Object {
    "Image": [Function],
  },
}
`;

exports[`loader should work with string value: warnings 1`] = `Array []`;

exports[`loader should work with the "commonjs" module format with the "default" exports type for "Foo" export list: errors 1`] = `
Array [
  "ModuleBuildError: Module build failed (from \`replaced original path\`):
Error: The \\"commonjs\\" format can't be used with \\"default\\" export type",
]
`;

exports[`loader should work with the "commonjs" module format with the "default" exports type for "Foo" export list: warnings 1`] = `Array []`;

exports[`loader should work with the "commonjs" module format with the "multiple" exports type for "Foo" export list: errors 1`] = `Array []`;

exports[`loader should work with the "commonjs" module format with the "multiple" exports type for "Foo" export list: module 1`] = `
"var Foo = Foo || {};
var Bar = Bar || {};
var Baz = {
  nestedNumber: '12',
  nestedFunction: function test() {}
};
var simple = function simple() {};
var simple_foo = [1, 2, 3, 4, 5];

Foo.Image = function(width, height, data){
  this.width = width || 0;
  this.height = height || 0;
  this.data = data || [];
};

Bar.test = [1, 2, 3, 4];

class MyClass {
  myFunction() {
    return 12;
  }
}

const myVariable = new MyClass();


/*** EXPORTS FROM exports-loader ***/
module.exports = {
  Foo
};
"
`;

exports[`loader should work with the "commonjs" module format with the "multiple" exports type for "Foo" export list: result 1`] = `
Object {
  "Foo": Object {
    "Image": [Function],
  },
}
`;

exports[`loader should work with the "commonjs" module format with the "multiple" exports type for "Foo" export list: warnings 1`] = `Array []`;

exports[`loader should work with the "commonjs" module format with the "multiple" exports type for ["Foo","Bar"] export list: errors 1`] = `Array []`;

exports[`loader should work with the "commonjs" module format with the "multiple" exports type for ["Foo","Bar"] export list: module 1`] = `
"var Foo = Foo || {};
var Bar = Bar || {};
var Baz = {
  nestedNumber: '12',
  nestedFunction: function test() {}
};
var simple = function simple() {};
var simple_foo = [1, 2, 3, 4, 5];

Foo.Image = function(width, height, data){
  this.width = width || 0;
  this.height = height || 0;
  this.data = data || [];
};

Bar.test = [1, 2, 3, 4];

class MyClass {
  myFunction() {
    return 12;
  }
}

const myVariable = new MyClass();


/*** EXPORTS FROM exports-loader ***/
module.exports = {
  Foo,
  Bar
};
"
`;

exports[`loader should work with the "commonjs" module format with the "multiple" exports type for ["Foo","Bar"] export list: result 1`] = `
Object {
  "Bar": Object {
    "test": Array [
      1,
      2,
      3,
      4,
    ],
  },
  "Foo": Object {
    "Image": [Function],
  },
}
`;

exports[`loader should work with the "commonjs" module format with the "multiple" exports type for ["Foo","Bar"] export list: warnings 1`] = `Array []`;

exports[`loader should work with the "commonjs" module format with the "multiple" exports type for ["Foo",{"name":"Bar"}] export list: errors 1`] = `Array []`;

exports[`loader should work with the "commonjs" module format with the "multiple" exports type for ["Foo",{"name":"Bar"}] export list: module 1`] = `
"var Foo = Foo || {};
var Bar = Bar || {};
var Baz = {
  nestedNumber: '12',
  nestedFunction: function test() {}
};
var simple = function simple() {};
var simple_foo = [1, 2, 3, 4, 5];

Foo.Image = function(width, height, data){
  this.width = width || 0;
  this.height = height || 0;
  this.data = data || [];
};

Bar.test = [1, 2, 3, 4];

class MyClass {
  myFunction() {
    return 12;
  }
}

const myVariable = new MyClass();


/*** EXPORTS FROM exports-loader ***/
module.exports = {
  Foo,
  Bar
};
"
`;

exports[`loader should work with the "commonjs" module format with the "multiple" exports type for ["Foo",{"name":"Bar"}] export list: result 1`] = `
Object {
  "Bar": Object {
    "test": Array [
      1,
      2,
      3,
      4,
    ],
  },
  "Foo": Object {
    "Image": [Function],
  },
}
`;

exports[`loader should work with the "commonjs" module format with the "multiple" exports type for ["Foo",{"name":"Bar"}] export list: warnings 1`] = `Array []`;

exports[`loader should work with the "commonjs" module format with the "multiple" exports type for [{"name":"[name]","alias":"[name]A"}] export list: errors 1`] = `Array []`;

exports[`loader should work with the "commonjs" module format with the "multiple" exports type for [{"name":"[name]","alias":"[name]A"}] export list: module 1`] = `
"var Foo = Foo || {};
var Bar = Bar || {};
var Baz = {
  nestedNumber: '12',
  nestedFunction: function test() {}
};
var simple = function simple() {};
var simple_foo = [1, 2, 3, 4, 5];

Foo.Image = function(width, height, data){
  this.width = width || 0;
  this.height = height || 0;
  this.data = data || [];
};

Bar.test = [1, 2, 3, 4];

class MyClass {
  myFunction() {
    return 12;
  }
}

const myVariable = new MyClass();


/*** EXPORTS FROM exports-loader ***/
module.exports = {
  \\"simpleA\\": (simple)
};
"
`;

exports[`loader should work with the "commonjs" module format with the "multiple" exports type for [{"name":"[name]","alias":"[name]A"}] export list: result 1`] = `
Object {
  "simpleA": [Function],
}
`;

exports[`loader should work with the "commonjs" module format with the "multiple" exports type for [{"name":"[name]","alias":"[name]A"}] export list: warnings 1`] = `Array []`;

exports[`loader should work with the "commonjs" module format with the "multiple" exports type for [{"name":"[name]"}] export list: errors 1`] = `Array []`;

exports[`loader should work with the "commonjs" module format with the "multiple" exports type for [{"name":"[name]"}] export list: module 1`] = `
"var Foo = Foo || {};
var Bar = Bar || {};
var Baz = {
  nestedNumber: '12',
  nestedFunction: function test() {}
};
var simple = function simple() {};
var simple_foo = [1, 2, 3, 4, 5];

Foo.Image = function(width, height, data){
  this.width = width || 0;
  this.height = height || 0;
  this.data = data || [];
};

Bar.test = [1, 2, 3, 4];

class MyClass {
  myFunction() {
    return 12;
  }
}

const myVariable = new MyClass();


/*** EXPORTS FROM exports-loader ***/
module.exports = {
  simple
};
"
`;

exports[`loader should work with the "commonjs" module format with the "multiple" exports type for [{"name":"[name]"}] export list: result 1`] = `
Object {
  "simple": [Function],
}
`;

exports[`loader should work with the "commonjs" module format with the "multiple" exports type for [{"name":"[name]"}] export list: warnings 1`] = `Array []`;

exports[`loader should work with the "commonjs" module format with the "multiple" exports type for [{"name":"Foo","alias":"FooA"}] export list: errors 1`] = `Array []`;

exports[`loader should work with the "commonjs" module format with the "multiple" exports type for [{"name":"Foo","alias":"FooA"}] export list: module 1`] = `
"var Foo = Foo || {};
var Bar = Bar || {};
var Baz = {
  nestedNumber: '12',
  nestedFunction: function test() {}
};
var simple = function simple() {};
var simple_foo = [1, 2, 3, 4, 5];

Foo.Image = function(width, height, data){
  this.width = width || 0;
  this.height = height || 0;
  this.data = data || [];
};

Bar.test = [1, 2, 3, 4];

class MyClass {
  myFunction() {
    return 12;
  }
}

const myVariable = new MyClass();


/*** EXPORTS FROM exports-loader ***/
module.exports = {
  \\"FooA\\": (Foo)
};
"
`;

exports[`loader should work with the "commonjs" module format with the "multiple" exports type for [{"name":"Foo","alias":"FooA"}] export list: result 1`] = `
Object {
  "FooA": Object {
    "Image": [Function],
  },
}
`;

exports[`loader should work with the "commonjs" module format with the "multiple" exports type for [{"name":"Foo","alias":"FooA"}] export list: warnings 1`] = `Array []`;

exports[`loader should work with the "commonjs" module format with the "multiple" exports type for [{"name":"Foo"},{"name":"Bar"}] export list: errors 1`] = `Array []`;

exports[`loader should work with the "commonjs" module format with the "multiple" exports type for [{"name":"Foo"},{"name":"Bar"}] export list: module 1`] = `
"var Foo = Foo || {};
var Bar = Bar || {};
var Baz = {
  nestedNumber: '12',
  nestedFunction: function test() {}
};
var simple = function simple() {};
var simple_foo = [1, 2, 3, 4, 5];

Foo.Image = function(width, height, data){
  this.width = width || 0;
  this.height = height || 0;
  this.data = data || [];
};

Bar.test = [1, 2, 3, 4];

class MyClass {
  myFunction() {
    return 12;
  }
}

const myVariable = new MyClass();


/*** EXPORTS FROM exports-loader ***/
module.exports = {
  Foo,
  Bar
};
"
`;

exports[`loader should work with the "commonjs" module format with the "multiple" exports type for [{"name":"Foo"},{"name":"Bar"}] export list: result 1`] = `
Object {
  "Bar": Object {
    "test": Array [
      1,
      2,
      3,
      4,
    ],
  },
  "Foo": Object {
    "Image": [Function],
  },
}
`;

exports[`loader should work with the "commonjs" module format with the "multiple" exports type for [{"name":"Foo"},{"name":"Bar"}] export list: warnings 1`] = `Array []`;

exports[`loader should work with the "commonjs" module format with the "multiple" exports type for {"name":"Foo"} export list: errors 1`] = `Array []`;

exports[`loader should work with the "commonjs" module format with the "multiple" exports type for {"name":"Foo"} export list: module 1`] = `
"var Foo = Foo || {};
var Bar = Bar || {};
var Baz = {
  nestedNumber: '12',
  nestedFunction: function test() {}
};
var simple = function simple() {};
var simple_foo = [1, 2, 3, 4, 5];

Foo.Image = function(width, height, data){
  this.width = width || 0;
  this.height = height || 0;
  this.data = data || [];
};

Bar.test = [1, 2, 3, 4];

class MyClass {
  myFunction() {
    return 12;
  }
}

const myVariable = new MyClass();


/*** EXPORTS FROM exports-loader ***/
module.exports = {
  Foo
};
"
`;

exports[`loader should work with the "commonjs" module format with the "multiple" exports type for {"name":"Foo"} export list: result 1`] = `
Object {
  "Foo": Object {
    "Image": [Function],
  },
}
`;

exports[`loader should work with the "commonjs" module format with the "multiple" exports type for {"name":"Foo"} export list: warnings 1`] = `Array []`;

exports[`loader should work with the "commonjs" module format with the "named" exports type for "Foo" export list: errors 1`] = `
Array [
  "ModuleBuildError: Module build failed (from \`replaced original path\`):
Error: The \\"commonjs\\" format can't be used with \\"named\\" export type",
]
`;

exports[`loader should work with the "commonjs" module format with the "named" exports type for "Foo" export list: warnings 1`] = `Array []`;

exports[`loader should work with the "commonjs" module format with the "single" exports type for "Foo" export list: errors 1`] = `Array []`;

exports[`loader should work with the "commonjs" module format with the "single" exports type for "Foo" export list: module 1`] = `
"var Foo = Foo || {};
var Bar = Bar || {};
var Baz = {
  nestedNumber: '12',
  nestedFunction: function test() {}
};
var simple = function simple() {};
var simple_foo = [1, 2, 3, 4, 5];

Foo.Image = function(width, height, data){
  this.width = width || 0;
  this.height = height || 0;
  this.data = data || [];
};

Bar.test = [1, 2, 3, 4];

class MyClass {
  myFunction() {
    return 12;
  }
}

const myVariable = new MyClass();


/*** EXPORTS FROM exports-loader ***/
module.exports = Foo;
"
`;

exports[`loader should work with the "commonjs" module format with the "single" exports type for "Foo" export list: result 1`] = `
Object {
  "Image": [Function],
}
`;

exports[`loader should work with the "commonjs" module format with the "single" exports type for "Foo" export list: warnings 1`] = `Array []`;

exports[`loader should work with the "commonjs" module format with the "single" exports type for ["Foo","Bar"] export list: errors 1`] = `
Array [
  "ModuleBuildError: Module build failed (from \`replaced original path\`):
Error: The \\"commonjs\\" format can't be used with \\"single\\" export type and multiple export list",
]
`;

exports[`loader should work with the "commonjs" module format with the "single" exports type for ["Foo","Bar"] export list: warnings 1`] = `Array []`;

exports[`loader should work with the "commonjs" module format with the "single" exports type for {"name":"Foo"} export list: errors 1`] = `Array []`;

exports[`loader should work with the "commonjs" module format with the "single" exports type for {"name":"Foo"} export list: module 1`] = `
"var Foo = Foo || {};
var Bar = Bar || {};
var Baz = {
  nestedNumber: '12',
  nestedFunction: function test() {}
};
var simple = function simple() {};
var simple_foo = [1, 2, 3, 4, 5];

Foo.Image = function(width, height, data){
  this.width = width || 0;
  this.height = height || 0;
  this.data = data || [];
};

Bar.test = [1, 2, 3, 4];

class MyClass {
  myFunction() {
    return 12;
  }
}

const myVariable = new MyClass();


/*** EXPORTS FROM exports-loader ***/
module.exports = Foo;
"
`;

exports[`loader should work with the "commonjs" module format with the "single" exports type for {"name":"Foo"} export list: result 1`] = `
Object {
  "Image": [Function],
}
`;

exports[`loader should work with the "commonjs" module format with the "single" exports type for {"name":"Foo"} export list: warnings 1`] = `Array []`;

exports[`loader should work with the "module" module format with the "default" exports type for "Foo" export list: errors 1`] = `Array []`;

exports[`loader should work with the "module" module format with the "default" exports type for "Foo" export list: module 1`] = `
"var Foo = Foo || {};
var Bar = Bar || {};
var Baz = {
  nestedNumber: '12',
  nestedFunction: function test() {}
};
var simple = function simple() {};
var simple_foo = [1, 2, 3, 4, 5];

Foo.Image = function(width, height, data){
  this.width = width || 0;
  this.height = height || 0;
  this.data = data || [];
};

Bar.test = [1, 2, 3, 4];

class MyClass {
  myFunction() {
    return 12;
  }
}

const myVariable = new MyClass();


/*** EXPORTS FROM exports-loader ***/
export default Foo;
"
`;

exports[`loader should work with the "module" module format with the "default" exports type for "Foo" export list: result 1`] = `
Object {
  "default": Object {
    "Image": [Function],
  },
}
`;

exports[`loader should work with the "module" module format with the "default" exports type for "Foo" export list: warnings 1`] = `Array []`;

exports[`loader should work with the "module" module format with the "default" exports type for ["Foo","Bar"] export list: errors 1`] = `
Array [
  "ModuleBuildError: Module build failed (from \`replaced original path\`):
Error: The \\"module\\" format can't be used with \\"default\\" export type and multiple export list",
]
`;

exports[`loader should work with the "module" module format with the "default" exports type for ["Foo","Bar"] export list: warnings 1`] = `Array []`;

exports[`loader should work with the "module" module format with the "default" exports type for {"name":"Foo"} export list: errors 1`] = `Array []`;

exports[`loader should work with the "module" module format with the "default" exports type for {"name":"Foo"} export list: module 1`] = `
"var Foo = Foo || {};
var Bar = Bar || {};
var Baz = {
  nestedNumber: '12',
  nestedFunction: function test() {}
};
var simple = function simple() {};
var simple_foo = [1, 2, 3, 4, 5];

Foo.Image = function(width, height, data){
  this.width = width || 0;
  this.height = height || 0;
  this.data = data || [];
};

Bar.test = [1, 2, 3, 4];

class MyClass {
  myFunction() {
    return 12;
  }
}

const myVariable = new MyClass();


/*** EXPORTS FROM exports-loader ***/
export default Foo;
"
`;

exports[`loader should work with the "module" module format with the "default" exports type for {"name":"Foo"} export list: result 1`] = `
Object {
  "default": Object {
    "Image": [Function],
  },
}
`;

exports[`loader should work with the "module" module format with the "default" exports type for {"name":"Foo"} export list: warnings 1`] = `Array []`;

exports[`loader should work with the "module" module format with the "multiple" exports type for "Foo" export list: errors 1`] = `
Array [
  "ModuleBuildError: Module build failed (from \`replaced original path\`):
Error: The \\"module\\" format can't be used with \\"multiple\\" export type",
]
`;

exports[`loader should work with the "module" module format with the "multiple" exports type for "Foo" export list: warnings 1`] = `Array []`;

exports[`loader should work with the "module" module format with the "named" exports type for "Foo" export list: errors 1`] = `Array []`;

exports[`loader should work with the "module" module format with the "named" exports type for "Foo" export list: module 1`] = `
"var Foo = Foo || {};
var Bar = Bar || {};
var Baz = {
  nestedNumber: '12',
  nestedFunction: function test() {}
};
var simple = function simple() {};
var simple_foo = [1, 2, 3, 4, 5];

Foo.Image = function(width, height, data){
  this.width = width || 0;
  this.height = height || 0;
  this.data = data || [];
};

Bar.test = [1, 2, 3, 4];

class MyClass {
  myFunction() {
    return 12;
  }
}

const myVariable = new MyClass();


/*** EXPORTS FROM exports-loader ***/
export {
  Foo
};
"
`;

exports[`loader should work with the "module" module format with the "named" exports type for "Foo" export list: result 1`] = `
Object {
  "Foo": Object {
    "Image": [Function],
  },
}
`;

exports[`loader should work with the "module" module format with the "named" exports type for "Foo" export list: warnings 1`] = `Array []`;

exports[`loader should work with the "module" module format with the "named" exports type for ["Foo","Bar"] export list: errors 1`] = `Array []`;

exports[`loader should work with the "module" module format with the "named" exports type for ["Foo","Bar"] export list: module 1`] = `
"var Foo = Foo || {};
var Bar = Bar || {};
var Baz = {
  nestedNumber: '12',
  nestedFunction: function test() {}
};
var simple = function simple() {};
var simple_foo = [1, 2, 3, 4, 5];

Foo.Image = function(width, height, data){
  this.width = width || 0;
  this.height = height || 0;
  this.data = data || [];
};

Bar.test = [1, 2, 3, 4];

class MyClass {
  myFunction() {
    return 12;
  }
}

const myVariable = new MyClass();


/*** EXPORTS FROM exports-loader ***/
export {
  Foo,
  Bar
};
"
`;

exports[`loader should work with the "module" module format with the "named" exports type for ["Foo","Bar"] export list: result 1`] = `
Object {
  "Bar": Object {
    "test": Array [
      1,
      2,
      3,
      4,
    ],
  },
  "Foo": Object {
    "Image": [Function],
  },
}
`;

exports[`loader should work with the "module" module format with the "named" exports type for ["Foo","Bar"] export list: warnings 1`] = `Array []`;

exports[`loader should work with the "module" module format with the "named" exports type for ["Foo",{"name":"Bar"}] export list: errors 1`] = `Array []`;

exports[`loader should work with the "module" module format with the "named" exports type for ["Foo",{"name":"Bar"}] export list: module 1`] = `
"var Foo = Foo || {};
var Bar = Bar || {};
var Baz = {
  nestedNumber: '12',
  nestedFunction: function test() {}
};
var simple = function simple() {};
var simple_foo = [1, 2, 3, 4, 5];

Foo.Image = function(width, height, data){
  this.width = width || 0;
  this.height = height || 0;
  this.data = data || [];
};

Bar.test = [1, 2, 3, 4];

class MyClass {
  myFunction() {
    return 12;
  }
}

const myVariable = new MyClass();


/*** EXPORTS FROM exports-loader ***/
export {
  Foo,
  Bar
};
"
`;

exports[`loader should work with the "module" module format with the "named" exports type for ["Foo",{"name":"Bar"}] export list: result 1`] = `
Object {
  "Bar": Object {
    "test": Array [
      1,
      2,
      3,
      4,
    ],
  },
  "Foo": Object {
    "Image": [Function],
  },
}
`;

exports[`loader should work with the "module" module format with the "named" exports type for ["Foo",{"name":"Bar"}] export list: warnings 1`] = `Array []`;

exports[`loader should work with the "module" module format with the "named" exports type for [{"name":"[name]","alias":"[name]A"}] export list: errors 1`] = `Array []`;

exports[`loader should work with the "module" module format with the "named" exports type for [{"name":"[name]","alias":"[name]A"}] export list: module 1`] = `
"var Foo = Foo || {};
var Bar = Bar || {};
var Baz = {
  nestedNumber: '12',
  nestedFunction: function test() {}
};
var simple = function simple() {};
var simple_foo = [1, 2, 3, 4, 5];

Foo.Image = function(width, height, data){
  this.width = width || 0;
  this.height = height || 0;
  this.data = data || [];
};

Bar.test = [1, 2, 3, 4];

class MyClass {
  myFunction() {
    return 12;
  }
}

const myVariable = new MyClass();


/*** EXPORTS FROM exports-loader ***/
export {
  simple as simpleA
};
"
`;

exports[`loader should work with the "module" module format with the "named" exports type for [{"name":"[name]","alias":"[name]A"}] export list: result 1`] = `
Object {
  "simpleA": [Function],
}
`;

exports[`loader should work with the "module" module format with the "named" exports type for [{"name":"[name]","alias":"[name]A"}] export list: warnings 1`] = `Array []`;

exports[`loader should work with the "module" module format with the "named" exports type for [{"name":"[name]"}] export list: errors 1`] = `Array []`;

exports[`loader should work with the "module" module format with the "named" exports type for [{"name":"[name]"}] export list: module 1`] = `
"var Foo = Foo || {};
var Bar = Bar || {};
var Baz = {
  nestedNumber: '12',
  nestedFunction: function test() {}
};
var simple = function simple() {};
var simple_foo = [1, 2, 3, 4, 5];

Foo.Image = function(width, height, data){
  this.width = width || 0;
  this.height = height || 0;
  this.data = data || [];
};

Bar.test = [1, 2, 3, 4];

class MyClass {
  myFunction() {
    return 12;
  }
}

const myVariable = new MyClass();


/*** EXPORTS FROM exports-loader ***/
export {
  simple
};
"
`;

exports[`loader should work with the "module" module format with the "named" exports type for [{"name":"[name]"}] export list: result 1`] = `
Object {
  "simple": [Function],
}
`;

exports[`loader should work with the "module" module format with the "named" exports type for [{"name":"[name]"}] export list: warnings 1`] = `Array []`;

exports[`loader should work with the "module" module format with the "named" exports type for [{"name":"Foo","alias":"FooA"}] export list: errors 1`] = `Array []`;

exports[`loader should work with the "module" module format with the "named" exports type for [{"name":"Foo","alias":"FooA"}] export list: module 1`] = `
"var Foo = Foo || {};
var Bar = Bar || {};
var Baz = {
  nestedNumber: '12',
  nestedFunction: function test() {}
};
var simple = function simple() {};
var simple_foo = [1, 2, 3, 4, 5];

Foo.Image = function(width, height, data){
  this.width = width || 0;
  this.height = height || 0;
  this.data = data || [];
};

Bar.test = [1, 2, 3, 4];

class MyClass {
  myFunction() {
    return 12;
  }
}

const myVariable = new MyClass();


/*** EXPORTS FROM exports-loader ***/
export {
  Foo as FooA
};
"
`;

exports[`loader should work with the "module" module format with the "named" exports type for [{"name":"Foo","alias":"FooA"}] export list: result 1`] = `
Object {
  "FooA": Object {
    "Image": [Function],
  },
}
`;

exports[`loader should work with the "module" module format with the "named" exports type for [{"name":"Foo","alias":"FooA"}] export list: warnings 1`] = `Array []`;

exports[`loader should work with the "module" module format with the "named" exports type for [{"name":"Foo"},{"name":"Bar"}] export list: errors 1`] = `Array []`;

exports[`loader should work with the "module" module format with the "named" exports type for [{"name":"Foo"},{"name":"Bar"}] export list: module 1`] = `
"var Foo = Foo || {};
var Bar = Bar || {};
var Baz = {
  nestedNumber: '12',
  nestedFunction: function test() {}
};
var simple = function simple() {};
var simple_foo = [1, 2, 3, 4, 5];

Foo.Image = function(width, height, data){
  this.width = width || 0;
  this.height = height || 0;
  this.data = data || [];
};

Bar.test = [1, 2, 3, 4];

class MyClass {
  myFunction() {
    return 12;
  }
}

const myVariable = new MyClass();


/*** EXPORTS FROM exports-loader ***/
export {
  Foo,
  Bar
};
"
`;

exports[`loader should work with the "module" module format with the "named" exports type for [{"name":"Foo"},{"name":"Bar"}] export list: result 1`] = `
Object {
  "Bar": Object {
    "test": Array [
      1,
      2,
      3,
      4,
    ],
  },
  "Foo": Object {
    "Image": [Function],
  },
}
`;

exports[`loader should work with the "module" module format with the "named" exports type for [{"name":"Foo"},{"name":"Bar"}] export list: warnings 1`] = `Array []`;

exports[`loader should work with the "module" module format with the "named" exports type for {"name":"Foo"} export list: errors 1`] = `Array []`;

exports[`loader should work with the "module" module format with the "named" exports type for {"name":"Foo"} export list: module 1`] = `
"var Foo = Foo || {};
var Bar = Bar || {};
var Baz = {
  nestedNumber: '12',
  nestedFunction: function test() {}
};
var simple = function simple() {};
var simple_foo = [1, 2, 3, 4, 5];

Foo.Image = function(width, height, data){
  this.width = width || 0;
  this.height = height || 0;
  this.data = data || [];
};

Bar.test = [1, 2, 3, 4];

class MyClass {
  myFunction() {
    return 12;
  }
}

const myVariable = new MyClass();


/*** EXPORTS FROM exports-loader ***/
export {
  Foo
};
"
`;

exports[`loader should work with the "module" module format with the "named" exports type for {"name":"Foo"} export list: result 1`] = `
Object {
  "Foo": Object {
    "Image": [Function],
  },
}
`;

exports[`loader should work with the "module" module format with the "named" exports type for {"name":"Foo"} export list: warnings 1`] = `Array []`;

exports[`loader should work with the "module" module format with the "single" exports type for "Foo" export list: errors 1`] = `
Array [
  "ModuleBuildError: Module build failed (from \`replaced original path\`):
Error: The \\"module\\" format can't be used with \\"single\\" export type",
]
`;

exports[`loader should work with the "module" module format with the "single" exports type for "Foo" export list: warnings 1`] = `Array []`;
